from __future__ import print_function
from theano.tensor.signal import downsample
from theano.tensor.nnet import conv
import os
import sys
import timeit
import six.moves.cPickle as pickle
import gzip
import numpy

import theano
import theano.tensor as T
from theano.tensor.shared_randomstreams import RandomStreams
import xlrd
def relu(x,alpha=0.8):
    if alpha==0:
        return 0.5*(x+abs(x))
    else:
        f1=0.5*(1+alpha)
        f2=0.5*(1-alpha)
        return f1*x+f2*abs(x)
def relu(x,alpha=0.2):
    if alpha==0:
        return 0.5*(x+abs(x))
    else:
        f1=0.5*(1+alpha)
        f2=0.5*(1-alpha)
        return f1*x+f2*abs(x)
        
def shuru(dataname):
  excel=xlrd.open_workbook(dataname);
  sheet=excel.sheets()[0];
  a=numpy.empty((100,1024))
  for i in range(100):
    a[i]=sheet.row_values(i);
  return a



class LogisticRegression(object):

    def __init__(self, input, n_in, n_out):
       
        self.W = theano.shared(
            value=numpy.zeros(
                (n_in, n_out),
                dtype=theano.config.floatX
            ),
            name='W',
            borrow=True
        )
   
        self.b = theano.shared(
            value=numpy.zeros(
                (n_out,),
                dtype=theano.config.floatX
            ),
            name='b',
            borrow=True
        )

      
        self.p_y_given_x = T.nnet.softmax(T.dot(input, self.W) + self.b)

       
        self.y_pred = T.argmax(self.p_y_given_x, axis=1)
       
        self.params = [self.W, self.b]

        
        self.input = input

    def negative_log_likelihood(self, y):
       
        return -T.mean(T.log(self.p_y_given_x)[T.arange(y.shape[0]), y])
    

    def errors(self, y):
    

       
        if y.ndim != self.y_pred.ndim:
            raise TypeError(
                'y should have the same shape as self.y_pred',
                ('y', y.type, 'y_pred', self.y_pred.type)
            )
       
        if y.dtype.startswith('int'):
            return T.mean(T.neq(self.y_pred, y))
        else:
            raise NotImplementedError()

    

def load_data(data0,data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12,data13,data14,data15,data16,data17,data18,data19):
  
    
  
     data=numpy.empty((2000,1024))
     
     data[0:100]=shuru(data0);   
     data[100:200]=shuru(data1);
     data[200:300]=shuru(data2);
     data[300:400]=shuru(data3);
     data[400:500]=shuru(data4); 
     data[500:600]=shuru(data5);
     data[600:700]=shuru(data6);
     data[700:800]=shuru(data7);
     data[800:900]=shuru(data8); 
     data[900:1000]=shuru(data9);
     
     data[1000:1100]=shuru(data10);   
     data[1100:1200]=shuru(data11);
     data[1200:1300]=shuru(data12);
     data[1300:1400]=shuru(data13);
     data[1400:1500]=shuru(data14); 
     data[1500:1600]=shuru(data15);
     data[1600:1700]=shuru(data16);
     data[1700:1800]=shuru(data17);
     data[1800:1900]=shuru(data18); 
     data[1900:2000]=shuru(data19);
  

     label=numpy.empty(2000);
     label[0:100]=0
     label[1000:1100]=0
     for i in range(3):
      label[i*300+100:i*300+400]=i+1
      label[i*300+1100:i*300+1400]=i+1
      
     label=label.astype(numpy.int)

    #分成训练集、验证集、测试集，大小如下
     train_data=numpy.empty((500,1024))
     train_label=numpy.empty(500)
     valid_data=numpy.empty((500,1024))
     valid_label=numpy.empty(500)
     test_data=numpy.empty((500,1024))
     test_label=numpy.empty(500)
     
     train_data[0:50]=data[0:50]
     train_label[0:50]=label[0:50]
     valid_data[0:50]=data[50:100]
     valid_label[0:50]=label[50:100]
     test_data[0:50]=data[1050:1100]
     test_label[0:50]=label[1050:1100]
     for i in range(9):
       train_data[i*50+50:i*50+100]=data[i*100+100:i*100+150]
       train_label[i*50+50:i*50+100]=label[i*100+100:i*100+150]
       valid_data[i*50+50:i*50+100]=data[i*100+150:i*100+200]
       valid_label[i*50+50:i*50+100]=label[i*100+150:i*100+200]
       test_data[i*50+50:i*50+100]=data[i*100+1100:i*100+1150]
       test_label[i*50+50:i*50+100]=label[i*100+1100:i*100+1150]
     def shared_dataset(data_x, data_y, borrow=True):
         shared_x = theano.shared(numpy.asarray(data_x,
                                               dtype=theano.config.floatX),
                                 borrow=borrow)
         shared_y = theano.shared(numpy.asarray(data_y,
                                               dtype=theano.config.floatX),
                                 borrow=borrow)
         return shared_x, T.cast(shared_y, 'int32')



     train_set_x, train_set_y = shared_dataset(train_data,train_label)
     valid_set_x, valid_set_y = shared_dataset(valid_data,valid_label)
     test_set_x, test_set_y = shared_dataset(test_data,test_label)
     rval = [(train_set_x, train_set_y), (valid_set_x, valid_set_y),
            (test_set_x, test_set_y)]
     return rval  


    

    #分成训练集、验证集、测试集，大小如下
class LeNetConvPoolLayer(object):

    def __init__(self, rng, input, filter_shape, image_shape, poolsize=(2, 2)):

        assert image_shape[1] == filter_shape[1]
        self.input = input

        fan_in = numpy.prod(filter_shape[1:])
        fan_out = (filter_shape[0] * numpy.prod(filter_shape[2:]) /
                   numpy.prod(poolsize))

        # initialize weights with random weights
        W_bound = numpy.sqrt(6. / (fan_in + fan_out))
        self.W = theano.shared(
            numpy.asarray(
                rng.uniform(low=-W_bound, high=W_bound, size=filter_shape),
                dtype=theano.config.floatX
            ),
            borrow=True
        )

        # the bias is a 1D tensor -- one bias per output feature map
        b_values = numpy.zeros((filter_shape[0],), dtype=theano.config.floatX)
        self.b = theano.shared(value=b_values, borrow=True)

        # 卷积
        conv_out = conv.conv2d(
            input=input,
            filters=self.W,
            filter_shape=filter_shape,
            image_shape=image_shape
        )

        # 子采样
        pooled_out = downsample.max_pool_2d(
            input=conv_out,
            ds=poolsize,
            ignore_border=True
        )

        self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))

        # store parameters of this layer
        self.params = [self.W, self.b]   
     
  

class dA(object):
   

    def __init__(
        self,
        numpy_rng,
        theano_rng=None,
        input=None,
        n_visible=1024,
        n_hidden=100,
        W=None,
        bhid=None,
        bvis=None
    ):
       
        self.n_visible = n_visible
        self.n_hidden = n_hidden

       
        if not theano_rng:
            theano_rng = RandomStreams(numpy_rng.randint(2 ** 30))

       
        if not W:
         
            initial_W = numpy.asarray(
                numpy_rng.uniform(
                    low=-4 * numpy.sqrt(6. / (n_hidden + n_visible)),
                    high=4 * numpy.sqrt(6. / (n_hidden + n_visible)),
                    size=(n_visible, n_hidden)
                ),
                dtype=theano.config.floatX
            )
            W = theano.shared(value=initial_W, name='W', borrow=True)

        if not bvis:
            bvis = theano.shared(
                value=numpy.zeros(
                    n_visible,
                    dtype=theano.config.floatX
                ),
                borrow=True
            )

        if not bhid:
            bhid = theano.shared(
                value=numpy.zeros(
                    n_hidden,
                    dtype=theano.config.floatX
                ),
                name='b',
                borrow=True
            )

        self.W = W
     
        self.b = bhid
        
        self.b_prime = bvis
       
        self.W_prime = self.W.T
        self.theano_rng = theano_rng
       
        if input is None:
      
            self.x = T.dmatrix(name='input')
        else:
            self.x = input

        self.params = [self.W, self.b, self.b_prime]
        
   
    def get_corrupted_input(self, input, corruption_level):
      
        return self.theano_rng.binomial(size=input.shape, n=1,
                                        p=1 - corruption_level,
                                        dtype=theano.config.floatX) * input
    def get_noiseed_input(self, input): 
       
       return self.theano_rng.random_integers([1024]) *0.2+input

    def get_hidden_values(self, input):
       
        return T.nnet.sigmoid(T.dot(input, self.W) + self.b)

    def get_reconstructed_input(self, hidden):
       
        return T.nnet.sigmoid(T.dot(hidden, self.W_prime) + self.b_prime)

    def get_cost_updates1(self, corruption_level, learning_rate):
        
        tilde_x = self.get_corrupted_input(self.x, corruption_level)
        y = self.get_hidden_values(tilde_x)
        z = self.get_reconstructed_input(y)
     
        L = - T.sum(self.x * T.log(z) + (1 - self.x) * T.log(1 - z), axis=1)
      
        cost = T.mean(L)

     
        gparams = T.grad(cost, self.params)
      
        updates = [
            (param, param - learning_rate * gparam)
            for param, gparam in zip(self.params, gparams)
        ]

        return (cost, updates)
        
    def get_cost_updates0(self,learning_rate):
        
        tilde_x = self.get_noiseed_input(self.x)
        y = self.get_hidden_values(tilde_x)
        z = self.get_reconstructed_input(y)
     
        L = - T.sum(self.x * T.log(z) + (1 - self.x) * T.log(1 - z), axis=1)
      
        cost = T.mean(L)

     
        gparams = T.grad(cost, self.params)
      
        updates = [
            (param, param - learning_rate * gparam)
            for param, gparam in zip(self.params, gparams)
        ]

        return (cost, updates)

        
class HiddenLayer(object):
    def __init__(self, rng, input, n_in, n_out, W=None, b=None,
                 activation=T.tanh):
       
        self.input = input
        if W is None:
            W_values = numpy.asarray(
                rng.uniform(
                    low=-numpy.sqrt(6. / (n_in + n_out)),
                    high=numpy.sqrt(6. / (n_in + n_out)),
                    size=(n_in, n_out)
                ),
                dtype=theano.config.floatX
            )
            if activation == theano.tensor.nnet.sigmoid:
                W_values *= 4

            W = theano.shared(value=W_values, name='W', borrow=True)

        if b is None:
            b_values = numpy.zeros((n_out,), dtype=theano.config.floatX)
            b = theano.shared(value=b_values, name='b', borrow=True)

        self.W = W
        self.b = b

        lin_output = T.dot(input, self.W) + self.b
        self.output = (
            lin_output if activation is None
            else activation(lin_output)
        )
       
        self.params = [self.W, self.b]
        
        
        

class SdA(object):
    def __init__(
        self,
        numpy_rng,
        theano_rng=None,
        n_ins=1024,
        hidden_layers_sizes=[1024, 1024],
        n_outs=4,
        corruption_levels=[0.4],
        nkerns=[5,10,10],
        batch_size=100
    ):
        
        self.sigmoid_layers = []
        self.dA_layers = []
        self.params = []
        self.n_layers = len(hidden_layers_sizes)

        assert self.n_layers > 0

        if not theano_rng:
            theano_rng = RandomStreams(numpy_rng.randint(2 ** 30))
       
        self.x = T.matrix('x')  
        self.y = T.ivector('y')  
        
        for i in range(self.n_layers):
           
            if i == 0:
                input_size = n_ins
            else:
                input_size = hidden_layers_sizes[i - 1]

           
            if i == 0:
                layer_input = self.x
            else:
                layer_input = self.sigmoid_layers[-1].output

            sigmoid_layer = HiddenLayer(rng=numpy_rng,
                                        input=layer_input,
                                        n_in=input_size,
                                        n_out=hidden_layers_sizes[i],
                                        activation=T.nnet.sigmoid)
           
            self.sigmoid_layers.append(sigmoid_layer)
            
            self.params.extend(sigmoid_layer.params)

            
            dA_layer = dA(numpy_rng=numpy_rng,
                          theano_rng=theano_rng,
                          input=layer_input,
                          n_visible=input_size,
                          n_hidden=hidden_layers_sizes[i],
                          W=sigmoid_layer.W,
                          bhid=sigmoid_layer.b)
            self.dA_layers.append(dA_layer)
            
        layercov_input = self.sigmoid_layers[-1].output.reshape((batch_size, 1, 32, 32)) 
        
        self.layercov1 = LeNetConvPoolLayer(
                              rng=numpy_rng,
                              input=layercov_input ,
                              image_shape=(batch_size, 1, 32, 32),
                              filter_shape=(nkerns[0], 1, 5, 5),
                              poolsize=(2, 2)
    )
        layercov2_input=self.layercov1.output
        self.layercov2 = LeNetConvPoolLayer(
                              rng=numpy_rng,
                              input=layercov2_input ,
                              image_shape=(batch_size, nkerns[0], 14, 14),
                              filter_shape=(nkerns[1], nkerns[0], 5, 5),
                              poolsize=(2, 2)
    )
        layercov3_input=self.layercov2.output
        self.layercov3 = LeNetConvPoolLayer(
                              rng=numpy_rng,
                              input=layercov3_input ,
                              image_shape=(batch_size, nkerns[1], 5, 5),
                              filter_shape=(nkerns[2], nkerns[1], 2, 2),
                              poolsize=(2, 2)
    )
        self.layerfull1= HiddenLayer(
                             rng=numpy_rng,
                             input=self.layercov3.output.flatten(2),
                             n_in=nkerns[2] * 2 * 2,
                             n_out=40,     
                             activation=T.tanh
    )
        layerfull2_input = self.layerfull1.output
        self.layerfull2 = HiddenLayer(
                             rng=numpy_rng,
                             input=layerfull2_input,
                             n_in=40,
                             n_out=10,      
                             activation=T.tanh
    )
        self.logLayer = LogisticRegression(
            input=self.layerfull2.output,
            n_in=10,
            n_out=n_outs
        )
        
        self.params.extend(self.layercov1.params)
        self.params.extend(self.layercov2.params)
        self.params.extend(self.layercov3.params)
        self.params.extend(self.layerfull1.params)
        self.params.extend(self.layerfull2.params)
        self.params.extend(self.logLayer.params)
        
        self.finetune_cost = self.logLayer.negative_log_likelihood(self.y)
       
        self.errors = self.logLayer.errors(self.y)

    def pretraining_functions(self, train_set_x, batch_size):
       

        # index to a [mini]batch
        index = T.lscalar('index')  
        corruption_level = T.scalar('corruption')  
        learning_rate = T.scalar('lr')  

        batch_begin = index * batch_size
    
        batch_end = batch_begin + batch_size

        pretrain_fns = []
        for dA in self.dA_layers:
          if dA is self.dA_layers[0]: 
            cost, updates = dA.get_cost_updates0(learning_rate)
            fn = theano.function(
                inputs=[
                       index,
                       #theano.In(corruption_level, value=0.2),
                       #theano.In(learning_rate, value=0.1)
                       learning_rate
                ],
                outputs=cost,
                updates=updates,
                givens={
                    self.x: train_set_x[batch_begin: batch_end]
                }
            )
          
            pretrain_fns.append(fn)

        
          if dA is self.dA_layers[1]: 
            cost, updates = dA.get_cost_updates1(corruption_level,learning_rate)
            fn = theano.function(
                inputs=[
                       index,
                       #theano.In(corruption_level, value=0.2),
                       #theano.In(learning_rate, value=0.1)
                       corruption_level,
                       learning_rate
                ],
                outputs=cost,
                updates=updates,
                givens={
                    self.x: train_set_x[batch_begin: batch_end]
                }
            )
          
            pretrain_fns.append(fn)

        return pretrain_fns

    def build_finetune_functions(self, datasets, batch_size, learning_rate):
        

        (train_set_x, train_set_y) = datasets[0]
        (valid_set_x, valid_set_y) = datasets[1]
        (test_set_x, test_set_y) = datasets[2]

        n_valid_batches = valid_set_x.get_value(borrow=True).shape[0]
        n_valid_batches //= batch_size
        n_test_batches = test_set_x.get_value(borrow=True).shape[0]
        n_test_batches //= batch_size

        index = T.lscalar('index') 

        gparams = T.grad(self.finetune_cost, self.params)

        updates = [
            (param, param - gparam * learning_rate)
            for param, gparam in zip(self.params, gparams)
        ]

        train_fn = theano.function(
            inputs=[index],
            outputs=self.finetune_cost,
            updates=updates,
            givens={
                self.x: train_set_x[
                    index * batch_size: (index + 1) * batch_size
                ],
                self.y: train_set_y[
                    index * batch_size: (index + 1) * batch_size
                ]
            },
            name='train'
        )

        test_score_i = theano.function(
            [index],
            self.errors,
            givens={
                self.x: test_set_x[
                    index * batch_size: (index + 1) * batch_size
                ],
                self.y: test_set_y[
                    index * batch_size: (index + 1) * batch_size
                ]
            },
            name='test'
        )

        valid_score_i = theano.function(
            [index],
            self.errors,
            givens={
                self.x: valid_set_x[
                    index * batch_size: (index + 1) * batch_size
                ],
                self.y: valid_set_y[
                    index * batch_size: (index + 1) * batch_size
                ]
            },
            name='valid'
        )


        def valid_score():
            return [valid_score_i(i) for i in range(n_valid_batches)]

        def test_score():
            return [test_score_i(i) for i in range(n_test_batches)]

        return train_fn, valid_score, test_score






def test_SdA(finetune_lr=0.05, pretraining_epochs=[11,50],
             pretrain_lr=0.9, training_epochs=2000,
              batch_size=100):
   
    datasets = load_data('data098.xlsx','data105.xlsx','data106.xlsx','data107.xlsx','data189.xlsx','data190.xlsx','data191.xlsx','data316.xlsx','data317.xlsx','data318.xlsx','data098.xlsx','data105.xlsx','data106.xlsx','data107.xlsx','data189.xlsx','data190.xlsx','data191.xlsx','data316.xlsx','data317.xlsx','data318.xlsx')

    train_set_x, train_set_y = datasets[0]
    valid_set_x, valid_set_y = datasets[1]
    test_set_x, test_set_y = datasets[2]

    # compute number of minibatches for training, validation and testing
    n_train_batches = train_set_x.get_value(borrow=True).shape[0]
    n_train_batches //= batch_size

 
    numpy_rng = numpy.random.RandomState(89677)
    print('... building the model')
    sda = SdA(
        numpy_rng=numpy_rng,
        n_ins=1024,
        hidden_layers_sizes=[1024,1024],
        n_outs=4
    )
  
  
  
  
    print('... getting the pretraining functions')
    pretraining_fns = sda.pretraining_functions(train_set_x=train_set_x,
                                                batch_size=batch_size)

    print('... pre-training the model')
    start_time = timeit.default_timer()
    
    corruption_levels = [.2, .2,]
    
    for i in range(sda.n_layers):
        if i==0:
         for epoch in range(pretraining_epochs[0]):        
            c = []
            for batch_index in range(n_train_batches):
                c.append(pretraining_fns[i](index=batch_index,
                         lr=pretrain_lr))
            print('Pre-training layer %i, epoch %d, cost %f' % (i, epoch, numpy.mean(c)))
        if i==1:
         for epoch in range(pretraining_epochs[1]):        
            c = []
            for batch_index in range(n_train_batches):
                c.append(pretraining_fns[i](index=batch_index,
                         corruption=corruption_levels[i],
                         lr=pretrain_lr))
            print('Pre-training layer %i, epoch %d, cost %f' % (i, epoch, numpy.mean(c)))   

    end_time = timeit.default_timer()

    print(('The pretraining code for file ' +
           os.path.split(__file__)[1] +
           ' ran for %.2fm' % ((end_time - start_time) / 60.)), file=sys.stderr)
    
    print('... getting the finetuning functions')
    train_fn, validate_model, test_model = sda.build_finetune_functions(
        datasets=datasets,
        batch_size=batch_size,
        learning_rate=finetune_lr
    )

    print('... finetunning the model')
    
    patience = 10 * n_train_batches  
    patience_increase = 2.  
    improvement_threshold = 0.995 
    validation_frequency = min(n_train_batches, patience // 2)                              

    best_validation_loss = numpy.inf
    test_score = 0.
    start_time = timeit.default_timer()

    done_looping = False
    epoch = 0

    while (epoch < training_epochs) and (not done_looping):
        epoch = epoch + 1
        for minibatch_index in range(n_train_batches):
            minibatch_avg_cost = train_fn(minibatch_index)
            iter = (epoch - 1) * n_train_batches + minibatch_index

            if (iter + 1) % validation_frequency == 0:
                validation_losses = validate_model()
                this_validation_loss = numpy.mean(validation_losses)
                print('epoch %i, minibatch %i/%i, validation error %f %%' %
                      (epoch, minibatch_index + 1, n_train_batches,
                       this_validation_loss * 100.))
                if this_validation_loss < best_validation_loss:
                
                    if (
                        this_validation_loss < best_validation_loss *
                        improvement_threshold
                    ):
                        patience = max(patience, iter * patience_increase)

                   
                    best_validation_loss = this_validation_loss
                    best_iter = iter

             
                    test_losses = test_model()
                    test_score = numpy.mean(test_losses)
                    print(('     epoch %i, minibatch %i/%i, test error of '
                           'best model %f %%') %
                          (epoch, minibatch_index + 1, n_train_batches,
                           test_score * 100.))

        
            

    end_time = timeit.default_timer()
    print(
        (
            'Optimization complete with best validation score of %f %%, '
            'on iteration %i, '
            'with test performance %f %%'
        )
        % (best_validation_loss * 100., best_iter + 1, test_score * 100.)
    )
    print(('The training code for file ' +
           os.path.split(__file__)[1] +
           ' ran for %.2fm' % ((end_time - start_time) / 60.)), file=sys.stderr)


if __name__ == '__main__':
    test_SdA()
